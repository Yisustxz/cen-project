# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from space_shooter.networking.generated import game_pb2 as game__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in game_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GameServiceStub(object):
    """Servicio principal del juego
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/proto.GameService/Connect',
                request_serializer=game__pb2.ConnectRequest.SerializeToString,
                response_deserializer=game__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.SendEvent = channel.unary_unary(
                '/proto.GameService/SendEvent',
                request_serializer=game__pb2.GameEvent.SerializeToString,
                response_deserializer=game__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.StreamGame = channel.stream_stream(
                '/proto.GameService/StreamGame',
                request_serializer=game__pb2.ClientRequest.SerializeToString,
                response_deserializer=game__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.GetGameState = channel.stream_stream(
                '/proto.GameService/GetGameState',
                request_serializer=game__pb2.ClientRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)
        self.SubscribeToEvents = channel.unary_stream(
                '/proto.GameService/SubscribeToEvents',
                request_serializer=game__pb2.ClientRequest.SerializeToString,
                response_deserializer=game__pb2.NotificationEvent.FromString,
                _registered_method=True)


class GameServiceServicer(object):
    """Servicio principal del juego
    """

    def Connect(self, request, context):
        """Conectar al servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEvent(self, request, context):
        """Enviar un evento al servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamGame(self, request_iterator, context):
        """Stream bidireccional para la comunicaciÃ³n en tiempo real
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameState(self, request_iterator, context):
        """Obtener el estado del juego
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToEvents(self, request, context):
        """Suscribirse a notificaciones de eventos
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=game__pb2.ConnectRequest.FromString,
                    response_serializer=game__pb2.ConnectResponse.SerializeToString,
            ),
            'SendEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEvent,
                    request_deserializer=game__pb2.GameEvent.FromString,
                    response_serializer=game__pb2.ServerResponse.SerializeToString,
            ),
            'StreamGame': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamGame,
                    request_deserializer=game__pb2.ClientRequest.FromString,
                    response_serializer=game__pb2.ServerResponse.SerializeToString,
            ),
            'GetGameState': grpc.stream_stream_rpc_method_handler(
                    servicer.GetGameState,
                    request_deserializer=game__pb2.ClientRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
            'SubscribeToEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToEvents,
                    request_deserializer=game__pb2.ClientRequest.FromString,
                    response_serializer=game__pb2.NotificationEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.GameService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Servicio principal del juego
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.GameService/Connect',
            game__pb2.ConnectRequest.SerializeToString,
            game__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.GameService/SendEvent',
            game__pb2.GameEvent.SerializeToString,
            game__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamGame(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/proto.GameService/StreamGame',
            game__pb2.ClientRequest.SerializeToString,
            game__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGameState(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/proto.GameService/GetGameState',
            game__pb2.ClientRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/proto.GameService/SubscribeToEvents',
            game__pb2.ClientRequest.SerializeToString,
            game__pb2.NotificationEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
